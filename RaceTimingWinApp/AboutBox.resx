<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAPoAAAA8CAYAAABPXaeUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADI2lUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS41LWMwMTQgNzkuMTUxNDgxLCAyMDEzLzAzLzEzLTEyOjA5OjE1ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNl
        SUQ9InhtcC5paWQ6ODZFMDBFNzQ3NkM4MTFFMzg3OTNGNjY4NUI5MUQwRUYiIHhtcE1NOkRvY3VtZW50
        SUQ9InhtcC5kaWQ6ODZFMDBFNzU3NkM4MTFFMzg3OTNGNjY4NUI5MUQwRUYiPiA8eG1wTU06RGVyaXZl
        ZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4NkUwMEU3Mjc2QzgxMUUzODc5M0Y2Njg1Qjkx
        RDBFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4NkUwMEU3Mzc2QzgxMUUzODc5M0Y2Njg1Qjkx
        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
        Q0JCxhNDkf8DgfbmGXUIHM0AAAAASUVORK5CYII=
</value>
  </data>
</root>